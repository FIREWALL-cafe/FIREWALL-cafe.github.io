const { SecretManagerServiceClient } = require('@google-cloud/secret-manager');

class SecureConfig {
    constructor() {
        this.client = new SecretManagerServiceClient();
        this.projectId = process.env.GOOGLE_CLOUD_PROJECT_ID || process.env.PROJECT_ID;
        this.cache = new Map();
        this.cacheExpiry = new Map();
        this.cacheTTL = 5 * 60 * 1000; // 5 minutes
    }

    async getSecret(secretName) {
        // Check cache first
        if (this.cache.has(secretName) && Date.now() < this.cacheExpiry.get(secretName)) {
            return this.cache.get(secretName);
        }

        try {
            if (!this.projectId) {
                throw new Error('GOOGLE_CLOUD_PROJECT_ID or PROJECT_ID environment variable must be set');
            }

            const name = `projects/${this.projectId}/secrets/${secretName}/versions/latest`;
            const [version] = await this.client.accessSecretVersion({ name });
            const payload = version.payload.data.toString();

            // Cache the result
            this.cache.set(secretName, payload);
            this.cacheExpiry.set(secretName, Date.now() + this.cacheTTL);

            return payload;
        } catch (error) {
            console.error(`Error fetching secret ${secretName}:`, error.message);
            
            // Fallback to environment variable if secret manager fails
            const envVar = secretName.toUpperCase().replace(/-/g, '_');
            const envValue = process.env[envVar];
            
            if (envValue) {
                console.warn(`Using environment variable ${envVar} as fallback for secret ${secretName}`);
                return envValue;
            }
            
            throw new Error(`Failed to retrieve secret ${secretName} and no environment variable fallback found`);
        }
    }

    async loadConfiguration() {
        try {
            const config = {
                // Set to whatever port number you want
                port: 4430,

                // API URLs
                apiUrl: process.env.NODE_ENV === 'production' 
                    ? 'https://api.firewallcafe.com/'
                    : 'http://localhost:11458/',

                // Location
                location: 'New York City',

                // Image search provider
                imageSearchProvider: process.env.IMAGE_SEARCH_PROVIDER || 'serper',

                // For SSL (placeholders - should be handled separately in production)
                sslKey: '...',
                sslCert: '...',
                sslChain: '...',

                // Spreadsheet ID (placeholder)
                spreadsheetId: '...',
            };

            // Load secrets in production, use environment variables in development
            if (process.env.NODE_ENV === 'production') {
                console.log('Loading secrets from Google Cloud Secret Manager...');
                
                const secretMappings = {
                    'google-translate-api-key': 'apiKey',
                    'api-secret': 'apiSecret',
                    'serpapi-key': 'serpApiKey',
                    'serper-api-key': 'serperApiKey',
                    'postmark-api-key': 'postmarkApiKey',
                    'shared-secret': 'sharedSecret'
                };

                const secretPromises = Object.entries(secretMappings).map(async ([secretName, configKey]) => {
                    try {
                        const value = await this.getSecret(secretName);
                        config[configKey] = value;
                        console.log(`✓ Loaded secret: ${secretName}`);
                    } catch (error) {
                        console.error(`✗ Failed to load secret: ${secretName}`, error.message);
                        throw error;
                    }
                });

                await Promise.all(secretPromises);
                console.log('All secrets loaded successfully');
            } else {
                console.log('Development mode: Using environment variables for secrets...');
                
                // In development, use environment variables
                config.apiKey = process.env.GOOGLE_TRANSLATE_API_KEY || 'YOUR_GOOGLE_TRANSLATE_API_KEY';
                config.apiSecret = process.env.API_SECRET || 'YOUR_API_SECRET';
                config.serpApiKey = process.env.SERPAPI_KEY || 'YOUR_SERPAPI_KEY';
                config.serperApiKey = process.env.SERPER_API_KEY || 'YOUR_SERPER_API_KEY';
                config.postmarkApiKey = process.env.POSTMARK_API_KEY || 'YOUR_POSTMARK_API_KEY';
                config.sharedSecret = process.env.SHARED_SECRET || 'YOUR_SHARED_SECRET';
            }

            return config;
        } catch (error) {
            console.error('Failed to load configuration:', error);
            throw error;
        }
    }

    clearCache() {
        this.cache.clear();
        this.cacheExpiry.clear();
    }
}

// Create a singleton instance
const secureConfig = new SecureConfig();

// Export a function that returns the loaded configuration
let configPromise = null;

module.exports = {
    getConfig: () => {
        if (!configPromise) {
            configPromise = secureConfig.loadConfiguration();
        }
        return configPromise;
    },
    
    // Export the class for testing purposes
    SecureConfig,
    
    // Method to reload configuration (useful for testing or config updates)
    reloadConfig: () => {
        configPromise = null;
        secureConfig.clearCache();
        return module.exports.getConfig();
    }
};